version: "3"

services:
  # iframe with Jitsi Meet inside
  iframe:
    build: ./iframe
    restart: unless-stopped
    ports:
      - 5001:80
    environment:
      - BACKEND_URL=http://localhost:3000
      - JITSI_URL=https://localhost:8443
      - JITSI_DOMAIN=localhost:8443

  # backend collecting statistics
  backend:
    build: ./backend
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      - BACKEND_PORT=3000
      - ELASTIC_ENDPOINT=http://elasticsearch:9200

  # Jitsi Meet frontend
  jitsi:
    image: jitsi/web:stable-5765-1
    restart: unless-stopped
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - ./volumes/web:/config:Z
      - ./volumes/transcripts:/usr/share/jitsi-meet/transcripts:Z
      - ./jitsi/config.js:/defaults/config.js:ro
    env_file: .env.jitsi
    networks:
      meet.jitsi:
        aliases:
          - meet.jitsi

  # XMPP server
  prosody:
    image: jitsi/prosody:stable-5765-1
    restart: unless-stopped
    expose:
      - "5222"
      - "5347"
      - "5280"
    volumes:
      - ./volumes/prosody/config:/config:Z
      - ./volumes/prosody/prosody-plugins-custom:/prosody-plugins-custom:Z
    env_file: .env.jitsi
    networks:
      meet.jitsi:
        aliases:
          - xmpp.meet.jitsi

  # Focus component
  jicofo:
    image: jitsi/jicofo:stable-5765-1
    restart: unless-stopped
    volumes:
      - ./volumes/jicofo:/config:Z
    env_file: .env.jitsi
    depends_on:
      - prosody
    networks:
      meet.jitsi:

  # video bridge
  jvb:
    image: jitsi/jvb:stable-5765-1
    restart: unless-stopped
    ports:
      - "10000:10000/udp"
      - "4443:4443"
    volumes:
      - ./volumes/jvb:/config:Z
    env_file: .env.jitsi
    depends_on:
      - prosody
    networks:
      meet.jitsi:
        aliases:
          - jvb.meet.jitsi

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1

    environment:
      node.name: elasticsearch
      cluster.name: elasticsearch
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms2G -Xmx2G

    ulimits:
      memlock:
        soft: -1
        hard: -1

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.12.1

    depends_on:
      elasticsearch:
        condition: service_healthy

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:5601/api/status || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

    ports:
      - "5601:5601"

    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200

# custom network so all services can communicate using a FQDN
networks:
  meet.jitsi:
